Q3. Array 3 Pointers
Solved
character backgroundcharacter
Stuck somewhere?
Ask for help from a TA & get it resolved
Get help from TA
Problem Description

You are given 3 sorted arrays A, B and C.

Find i, j, k such that : max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])) is minimized.

Return the minimum max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])).



Problem Constraints

0 <= len(A), len(B), len(c) <= 106

0 <= A[i], B[i], C[i] <= 107



Input Format

First argument is an integer array A.

Second argument is an integer array B.

Third argument is an integer array C.



Output Format

Return an single integer denoting the minimum max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])).



Example Input

Input 1:

 A = [1, 4, 10]
 B = [2, 15, 20]
 C = [10, 12]
Input 2:

 A = [3, 5, 6]
 B = [2]
 C = [3, 4]


Example Output

Output 1:

 5
Output 2:

 1


Example Explanation

Explanation 1:

 With 10 from A, 15 from B and 10 from C.
Explanation 2:

 With 3 from A, 2 from B and 3 from C.


int Solution::minimize(const vector<int> &A, const vector<int> &B, const vector<int> &C) {
    //6 min

    int ans=INT_MAX,p1,p2,p3 ;
    p1=p2=p3=0;
    while(p1 < A.size() and p2 < B.size() and p3 < C.size())
    {
        int maxx = max({A[p1],B[p2],C[p3]});
        int minn = min({A[p1],B[p2],C[p3]});

        if(abs(maxx-minn) < ans)
        ans = abs(maxx-minn);

        if(minn == A[p1])
        p1++;
        else if(minn == B[p2])
        p2++;
        else if(minn == C[p3])
        p3++;

    }

    return ans;
}


////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

### [26\. Remove Duplicates from Sorted Array](https://leetcode.com/problems/remove-duplicates-from-sorted-array/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Two Pointers](https://leetcode.com/tag/two-pointers/)


Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums` should hold the final result. It does not matter what you leave beyond the first `k` elements.

Return `k` _after placing the final result in the first_ `k` _slots of_ `nums`.

Do **not** allocate extra space for another array. You must do this by **modifying the input array** with O(1) extra memory.

**Custom Judge:**

The judge will test your solution with the following code:

```
int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
```

If all assertions pass, then your solution will be **accepted**.

**Example 1:**

```
Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
```

**Example 2:**

```
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
```

**Constraints:**

*   `0 <= nums.length <= 3 * 10<sup>4</sup>`
*   `-100 <= nums[i] <= 100`
*   `nums` is sorted in **non-decreasing** order.


#### Solution

Language: **C++**

```c++
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() == 0)
            return 0;
        int left = 1;
        for(int right = 1 ; right < nums.size(); right++)
        {
            if(nums[right-1] != nums[right])
            nums[left++] = nums[right];
        }
        
        return left;
    }
};
```


////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


### [283\. Move Zeroes](https://leetcode.com/problems/move-zeroes/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Two Pointers](https://leetcode.com/tag/two-pointers/)


Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.

**Note** that you must do this in-place without making a copy of the array.

**Example 1:**

```
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
```

**Example 2:**

```
Input: nums = [0]
Output: [0]
```

**Constraints:**

*   `1 <= nums.length <= 10<sup>4</sup>`
*   `-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1`

**Follow up:** Could you minimize the total number of operations done?

#### Solution

Language: **C++**

```c++
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        // 
        
      int p1=0;
        for(int p2 = 0 ; p2 < nums.size() ; p2++)
        {
            if(nums[p2])
            {
                swap(nums[p1++],nums[p2]);
            }
        }
            
    }
};
```

////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
### [350\. Intersection of Two Arrays II](https://leetcode.com/problems/intersection-of-two-arrays-ii/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Hash Table](https://leetcode.com/tag/hash-table/), [Two Pointers](https://leetcode.com/tag/two-pointers/), [Binary Search](https://leetcode.com/tag/binary-search/), [Sorting](https://leetcode.com/tag/sorting/)


Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**.

**Example 1:**

```
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
```

**Example 2:**

```
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
```

**Constraints:**

*   `1 <= nums1.length, nums2.length <= 1000`
*   `0 <= nums1[i], nums2[i] <= 1000`

**Follow up:**

*   What if the given array is already sorted? How would you optimize your algorithm?
*   What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?
*   What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?


#### Solution

Language: **C++**

```c++
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        
        vector<int> ans;
        
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        
 
        int i = 0, j = 0;
        while(i < nums1.size() and j < nums2.size())
        {
            if(nums1[i] == nums2[j])
            {
                  ans.push_back(nums1[i]);
                i++;
                j++;
            }
            else if(nums1[i] > nums2[j])
                j++;
            else
                i++;
            
        }
        
        return ans;
    }
};
```
////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


### [905\. Sort Array By Parity](https://leetcode.com/problems/sort-array-by-parity/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Two Pointers](https://leetcode.com/tag/two-pointers/), [Sorting](https://leetcode.com/tag/sorting/)


Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers.

Return _**any array** that satisfies this condition_.

**Example 1:**

```
Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
```

**Example 2:**

```
Input: nums = [0]
Output: [0]
```

**Constraints:**

*   `1 <= nums.length <= 5000`
*   `0 <= nums[i] <= 5000`


#### Solution

Language: **C++**

```c++
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int p1 = 0, p2 = nums.size()-1;
        int i=0;
        while(i < p2)
        {
            if(nums[i] %2 == 0)
            {
                swap(nums[i],nums[p1++]);
            }
            else
            {
                swap(nums[i],nums[p2--]);
                continue;
            }
            i++;
        }
        
        return nums;
    }
};
```

////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

### [15\. 3Sum](https://leetcode.com/problems/3sum/)

Difficulty: **Medium**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Two Pointers](https://leetcode.com/tag/two-pointers/), [Sorting](https://leetcode.com/tag/sorting/)


Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.

Notice that the solution set must not contain duplicate triplets.

**Example 1:**

```
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
```

**Example 2:**

```
Input: nums = []
Output: []
```

**Example 3:**

```
Input: nums = [0]
Output: []
```

**Constraints:**

*   `0 <= nums.length <= 3000`
*   `-10<sup>5</sup> <= nums[i] <= 10<sup>5</sup>`


#### Solution

Language: **C++**

```c++
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        
        for(int i= 0 ;i < nums.size() ; i++)
        {
            if(i>0 and nums[i] == nums[i-1]) continue;
            
            int p1=i+1, p2= nums.size()-1;
            while(p1 < p2)
            {
                int sum = nums[i] + nums[p1] + nums[p2];
                if(sum == 0)
                {
                    ans.push_back(vector<int> {nums[i],nums[p1],nums[p2]});
                    while(p1+1 < nums.size() and nums[p1] == nums[p1+1]) p1++;
                    while(p2 > 0 and nums[p2] == nums[p2-1]) p2--;
                    
                    p1++;
                    p2--;
                }
                else if(sum < 0)
                    p1++;
                else
                    p2--;
                
            }
```



////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
### [16\. 3Sum Closest](https://leetcode.com/problems/3sum-closest/)

Difficulty: **Medium**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Two Pointers](https://leetcode.com/tag/two-pointers/), [Sorting](https://leetcode.com/tag/sorting/)


Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.

Return _the sum of the three integers_.

You may assume that each input would have exactly one solution.

**Example 1:**

```
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2\. (-1 + 2 + 1 = 2).
```

**Example 2:**

```
Input: nums = [0,0,0], target = 1
Output: 0
```

**Constraints:**

*   `3 <= nums.length <= 1000`
*   `-1000 <= nums[i] <= 1000`
*   `-10<sup>4</sup> <= target <= 10<sup>4</sup>`


#### Solution

Language: **C++**

```c++
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        //1:38 pm
      
        sort(nums.begin(),nums.end());
        int ans = nums[0]+nums[1]+nums[2];
        
        for(int i=0; i < nums.size()-1 ; i++)
        {
        if(i > 0 and nums[i]==nums[i-1])  continue;
            int p1=i+1, p2 = nums.size()-1;
            while(p1<p2)
            {
                int sum = nums[i]+nums[p1]+nums[p2];
                if(abs( target - sum) < abs(ans - target))
                    ans = sum;
                
                if(sum < target)
                    p1++;
                else
                    p2--;
            }
        
        }
        
        return ans;
    }
};
```




////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
### [189\. Rotate Array](https://leetcode.com/problems/rotate-array/)

Difficulty: **Medium**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Math](https://leetcode.com/tag/math/), [Two Pointers](https://leetcode.com/tag/two-pointers/)


Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.

**Example 1:**

```
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
```

**Example 2:**

```
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
```

**Constraints:**

*   `1 <= nums.length <= 10<sup>5</sup>`
*   `-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1`
*   `0 <= k <= 10<sup>5</sup>`

**Follow up:**

*   Try to come up with as many solutions as you can. There are at least **three** different ways to solve this problem.
*   Could you do it in-place with `O(1)` extra space?


#### Solution

Language: **C++**

```c++
class Solution {
public:
   /* void reverse(vector<int> &nums,int l,int h)
    {
        while(l< h)
        {
            swap(nums[l++],nums[h--]);
        }
    }*/
    void rotate(vector<int>& nums, int k) {
        
        k = k % nums.size();
        reverse(nums.begin(),nums.end());
        reverse(nums.begin(),nums.begin()+k);
        reverse(nums.begin()+k,nums.end());
    /*    reverse(nums,0,nums.size()-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.size()-1);*/
    }
};
```



////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\





////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\





////////////////////////////////////////////////////////////////////*******************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
