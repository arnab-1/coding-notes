Q 1:>>
Q3. Array with consecutive elements
character backgroundcharacter
Stuck somewhere?
Ask for help from a TA & get it resolved
Get help from TA
Problem Description

Given an array of positive integers A, check and return whether the array elements are consecutive or not.
NOTE: Try this with O(1) extra space.

Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 10^9


Input Format
The only argument given is the integer array A.

Output Format
Return 1 if the array elements are consecutive else return 0.

Example Input
Input 1:

 A = [3, 2, 1, 4, 5]
Input 2:

 A = [1, 3, 2, 5]

Example Output
Output 1:

 1
Output 2:

 0

Example Explanation
Explanation 1:

 As you can see all the elements are consecutive, so we return 1.
Explanation 2:

 Element 4 is missing, so we return 0.
 
 
 Solution :
 int Solution::solve(vector<int> &A) {
    // 3 min 
    if(A.size() == 1)
    return 1;
    sort(A.begin(),A.end());

    for(int i=0; i < A.size()-1 ; i++)
    {
        if(A[i]+1 != A[i+1])
        return 0;
    }

    return 1;
}

///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Q2>
### [945\. Minimum Increment to Make Array Unique](https://leetcode.com/problems/minimum-increment-to-make-array-unique/)

Difficulty: **Medium**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Greedy](https://leetcode.com/tag/greedy/), [Sorting](https://leetcode.com/tag/sorting/), [Counting](https://leetcode.com/tag/counting/)


You are given an integer array `nums`. In one move, you can pick an index `i` where `0 <= i < nums.length` and increment `nums[i]` by `1`.

Return _the minimum number of moves to make every value in_ `nums` _**unique**_.

**Example 1:**

```
Input: nums = [1,2,2]
Output: 1
Explanation: After 1 move, the array could be [1, 2, 3].
```

**Example 2:**

```
Input: nums = [3,2,1,2,1,7]
Output: 6
Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.
```

**Constraints:**

*   `1 <= nums.length <= 10<sup>5</sup>`
*   `0 <= nums[i] <= 10<sup>5</sup>`


#### Solution

Language: **C++**

```c++
class Solution {
public:
    int minIncrementForUnique(vector<int>& nums) {
        // 1 1 2 2 3 7
        // 1 2 3 4 5 7
        sort(nums.begin(),nums.end());
        
        int count = 0;
        for(int i=0; i < nums.size() - 1 ; i++)
        {
            if(nums[i] == nums[i+1] || (nums[i] > nums[i+1]) )
            {
                int t = nums[i+1];
                nums[i+1] = nums[i]+1;
                count += (nums[i+1]- t);
            }
        }
        return count;
    }
};
```
///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Q4 : 
Q1. Chocolate Distribution
character backgroundcharacter
Stuck somewhere?
Ask for help from a TA & get it resolved
Get help from TA
Problem Description

Given an array A of N integers where each value represents number of chocolates in a packet.

i-th can have A[i] number of chocolates.

There are B number students, the task is to distribute chocolate packets following below conditions:

1. Each student gets one packet.
2. The difference between the number of chocolates in packet with maximum chocolates and packet with minimum chocolates given to the students is minimum.
Return the minimum difference (that can be achieved) between maximum and minimum number of chocolates distributed.

Problem Constraints
0 <= N <= 10^5
1 <= A[i] <= 10^7
0 <= B <= 10^5


Input Format
The first argument contains an integer array A.

The second argument contains an integer B.

Output Format
Return the minimum difference (that can be achieved) between maximum and minimum number of chocolates distributed.

Example Input
Input:

  A : [3, 4, 1, 9, 56, 7, 9, 12]
  B : 5


Example Output
Output:

  6

Example Explanation
Explanation:

  Minimum Difference is 6
  The set goes like 3,4,7,9,9 and the output is 9-3 = 6
  
  
  Solution:
  
  int Solution::solve(vector<int> &A, int B) {
    // 1 hr 10 min
    sort(A.begin(),A.end());
    int n = A.size();
    if(n < B || B==0)
    return 0;
    int ans = INT_MAX;
    for(int i=0 ; i < n-B ; i++)
    {
        ans = min(ans, A[i+B-1] - A[i]);
    }
    return ans;
}

///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Q51>

Q1. MaxMod
character backgroundcharacter
Stuck somewhere?
Ask for help from a TA & get it resolved
Get help from TA
Problem Description

Given an array A of size N, groot wants you to pick 2 indices i and j such that

1 <= i, j <= N
A[i] % A[j] is maximum among all possible pairs of (i, j).
Help Groot in finding the maximum value of A[i] % A[j] for some i, j.



Problem Constraints
1 <= N <= 100000
0 <= A[i] <= 100000

Input Format
First and only argument in an integer array A.

Output Format
Return an integer denoting the maximum value of A[i] % A[j] for any valid i, j.

Example Input
Input 1:

 A = [1, 2, 44, 3]
Input 2:

 A = [2, 6, 4]


Example Output
Output 1:

 3
Output 2:

 4


Example Explanation
Explanation 1:

 For i = 3, j = 2  A[i] % A[j] = 3 % 44 = 3.
 No pair exists which has more value than 3.
Explanation 2:

 For i = 2, j = 1  A[i] % A[j] = 4 % 6 = 4.
 

int Solution::solve(vector<int> &A) {
    //15 min

    int max1 ,max2;
    max1 = max2 = 0;
    if(A.size() == 1)
    return A[0];

    sort(A.begin(),A.end());

    for(int i : A)
    {
       if(i > max1)
       {
            max2 = max1;
           max1 = i;
           
       }
    }

    return max2 % max1;
}


///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

### [169\. Majority Element](https://leetcode.com/problems/majority-element/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Hash Table](https://leetcode.com/tag/hash-table/), [Divide and Conquer](https://leetcode.com/tag/divide-and-conquer/), [Sorting](https://leetcode.com/tag/sorting/), [Counting](https://leetcode.com/tag/counting/)


Given an array `nums` of size `n`, return _the majority element_.

The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.

**Example 1:**

```
Input: nums = [3,2,3]
Output: 3
```

**Example 2:**

```
Input: nums = [2,2,1,1,1,2,2]
Output: 2
```

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 5 * 10<sup>4</sup>`
*   `-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1`

**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?

#### Solution

Language: **C++**

```c++
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //15 min
        if(nums.size() == 1)
            return nums[0];
        unordered_map<int,int> hm;
        for(int i : nums)
        {
            if(hm.find(i) != hm.end())
            hm[i]++;
            else
                hm.insert({i,1});
        }
        
        int count = INT_MIN,ans;
        for(auto i  : hm)
        {
         //   ans = max(count,hm[i]);
            {
                if(count < i.second)
                {
                    ans = i.first;
                    count = i.second;
                }
            }
        }
        
        return ans;
    }
};
`

///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

### [414\. Third Maximum Number](https://leetcode.com/problems/third-maximum-number/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Sorting](https://leetcode.com/tag/sorting/)


Given an integer array `nums`, return _the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number_.

**Example 1:**

```
Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
```

**Example 2:**

```
Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
```

**Example 3:**

```
Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.
```

**Constraints:**

*   `1 <= nums.length <= 10<sup>4</sup>`
*   `-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1`

**Follow up:** Can you find an `O(n)` solution?

#### Solution

Language: **C++**

```c++
class Solution {
public:
    int thirdMax(vector<int>& nums) {
        // 12:08 pm start coding 
        int n = nums.size();
        if(n==1)
            return nums[0];
        
        if(n==2)
            return max(nums[0],nums[1]);
        
        long long int max1,max2,max3;
        max1 = max2 = max3 = LONG_MIN;
        
        for(int i: nums)
        {
            if(max1 == i || max2 == i || max3 == i)
                continue;
            
            if(i > max1)
            {
                max3 = max2;
                max2 = max1;
                max1 = i;
            }
            else if(i > max2)
            {
                max3 = max2;
                max2 = i;
            }
```
///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
Q2. Maximum Unsorted Subarray
Solved
character backgroundcharacter
Stuck somewhere?
Ask for help from a TA & get it resolved
Get help from TA
Problem Description

Given an array A of non-negative integers of size N. Find the minimum sub-array Al, Al+1 ,..., Ar such that if we sort(in ascending order) that sub-array, then the whole array should get sorted. If A is already sorted, output -1.



Problem Constraints
1 <= N <= 1000000
1 <= A[i] <= 1000000



Input Format
First and only argument is an array of non-negative integers of size N.



Output Format
Return an array of length 2 where First element denotes the starting index(0-based) and second element denotes the ending index(0-based) of the sub-array. If the array is already sorted, return an array containing only one element i.e. -1.



Example Input
Input 1:

A = [1, 3, 2, 4, 5]
Input 2:

A = [1, 2, 3, 4, 5]


Example Output
Output 1:

[1, 2]
Output 2:

[-1]


Example Explanation
Explanation 1:

If we sort the sub-array A1, A2, then the whole array A gets sorted.
Explanation 2:

A is already sorted.


Solution:
vector<int> Solution::subUnsort(vector<int> &A) {
    // 64 min

    bool check = true;;
    for(int i ; i < A.size() - 1; i++)
    {
        if(A[i] > A[i+1])
        check = false;
    }

    if(check)
    return vector<int> {-1};

    int last = -1, first = -1;
    for(int i=0; i < A.size()-1; i++)
    {
        if(A[i] > A[i+1])
        {
            first = i;
            break;
        }
    }
    for(int i= A.size() -1 ; i > 0 ; i--)
    {// 4, 15, 4, 4, 15, 18, 20 
        if(A[i] < A[i-1])
        {
            last = i;
            break;
        }
    }
//  4, 15, 4, 4, 15, 18, 20 
    int minn = INT_MAX, maxx = INT_MIN;
    for(int i=first ; i <= last ; i++ )
    {
        minn = min(minn,A[i]);
        maxx = max(maxx,A[i]);
    }

    for(int i=0 ; i < first ; i++)
    {
        if(A[i] > minn)
        {
            first = i;
            break;
        }
    }
//  4, 15, 4, 4, 15, 18, 20 
    for(int i= A.size() -1  ; i > last ; i--)
    {

        if(A[i] < maxx)
        {
            last = i;
            break;
        }
    }

    return vector<int> {first,last};
}
///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

### [389\. Find the Difference](https://leetcode.com/problems/find-the-difference/)

Difficulty: **Easy**  

Related Topics: [Hash Table](https://leetcode.com/tag/hash-table/), [String](https://leetcode.com/tag/string/), [Bit Manipulation](https://leetcode.com/tag/bit-manipulation/), [Sorting](https://leetcode.com/tag/sorting/)


You are given two strings `s` and `t`.

String `t` is generated by random shuffling string `s` and then add one more letter at a random position.

Return the letter that was added to `t`.

**Example 1:**

```
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
```

**Example 2:**

```
Input: s = "", t = "y"
Output: "y"
```

**Example 3:**

```
Input: s = "a", t = "aa"
Output: "a"
```

**Example 4:**

```
Input: s = "ae", t = "aea"
Output: "a"
```

**Constraints:**

*   `0 <= s.length <= 1000`
*   `t.length == s.length + 1`
*   `s` and `t` consist of lower-case English letters.


#### Solution

Language: **C++**

```c++
class Solution {
public:
    char findTheDifference(string s, string t) {
​
        int n = t.length();
        
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        
        for(int i = 0 ; i < s.length() ; i++)
        {
            if(s[i] != t[i])
                return t[i];
        }
        
        return t[n-1];
    }
};
```


///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


### [1331\. Rank Transform of an Array](https://leetcode.com/problems/rank-transform-of-an-array/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Hash Table](https://leetcode.com/tag/hash-table/), [Sorting](https://leetcode.com/tag/sorting/)


Given an array of integers `arr`, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:

*   Rank is an integer starting from 1.
*   The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
*   Rank should be as small as possible.

**Example 1:**

```
Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.
```

**Example 2:**

```
Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: Same elements share the same rank.
```

**Example 3:**

```
Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]
```

**Constraints:**

*   `0 <= arr.length <= 10<sup>5</sup>`
*   `-10<sup>9</sup> <= arr[i] <= 10<sup>9</sup>`


#### Solution

Language: **C++**

```c++
class Solution {
public:
    vector<int> arrayRankTransform(vector<int>& arr) {
        unordered_map<int,int> hm;
        int n = arr.size();
        if(n== 0)
            return vector<int> {};
        
        vector<int> temp;
        for(int i : arr)
        {
            temp.push_back(i);
        }
        
        sort(temp.begin(),temp.end());
        int k=1;
        for(int i=0; i < n ; i++)
        {
            if(hm.find(temp[i]) != hm.end())
            {
                continue;
            }
            else
                hm.insert({temp[i],k++});
        }
        for(int i=0; i < n; i++)
        {
            if(hm.find(arr[i]) != hm.end())
            {
                temp[i] = hm[arr[i]];
            }
        }
        
        return temp;
    }
};
```
///////////////////////////////////////////////////////////////******************************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


