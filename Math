1=> 
Count Square Sum Triples
Easy

111

14

Add to List

Share
A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.

Given an integer n, return the number of square triples such that 1 <= a, b, c <= n.

 

Example 1:

Input: n = 5
Output: 2
Explanation: The square triples are (3,4,5) and (4,3,5).
Example 2:

Input: n = 10
Output: 4
Explanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).
 

Constraints:

1 <= n <= 250

CODE


class Solution {
public:
    int countTriples(int n) {
        //11:33 pm to 12:04 pm
        vector<int> sqr((n*n)+1,0);
        
        for(int i=1; i <= n ; i++)
        {
            sqr[i*i] = 1;// 1 4 9 16 25 36 49
        }
        
        int count=0;
        for(int i=1 ; i <= n ;i++)
        {
            for(int j=i;  (i*i) + (j*j) <= n*n ; j++)
            {
                
                if(sqr[(i*i) + (j*j)])
                    count+=2;
            }
        }
        
        return count;
    }
};



////////////////////////////////////////////////////////////////////////*******************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
2=>
### [268\. Missing Number](https://leetcode.com/problems/missing-number/)

Difficulty: **Easy**  

Related Topics: [Array](https://leetcode.com/tag/array/), [Hash Table](https://leetcode.com/tag/hash-table/), [Math](https://leetcode.com/tag/math/), [Bit Manipulation](https://leetcode.com/tag/bit-manipulation/), [Sorting](https://leetcode.com/tag/sorting/)


Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return _the only number in the range that is missing from the array._

**Example 1:**

```
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
```

**Example 2:**

```
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
```

**Example 3:**

```
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
```

**Example 4:**

```
Input: nums = [0]
Output: 1
Explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.
```

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 10<sup>4</sup>`
*   `0 <= nums[i] <= n`
*   All the numbers of `nums` are **unique**.

**Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?


#### Solution

Language: **C++**

```c++
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int array_sum = 0;
        for(int i : nums)
            array_sum += i;
        int n = nums.size();
        int sumOfN_nums = (n*(n+1)/2);
        
        return sumOfN_nums - array_sum;
        
    }
};
```

////////////////////////////////////////////////////////////////////////*******************************\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
3=>
### [1518\. Water Bottles](https://leetcode.com/problems/water-bottles/)

Difficulty: **Easy**  

Related Topics: [Math](https://leetcode.com/tag/math/), [Simulation](https://leetcode.com/tag/simulation/)


Given `numBottles` full water bottles, you can exchange `numExchange` empty water bottles for one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Return the **maximum** number of water bottles you can drink.

**Example 1:**

**![](https://assets.leetcode.com/uploads/2020/07/01/sample_1_1875.png)**

```
Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.
Number of water bottles you can drink: 9 + 3 + 1 = 13.
```

**Example 2:**

![](https://assets.leetcode.com/uploads/2020/07/01/sample_2_1875.png)

```
Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.
```

**Example 3:**

```
Input: numBottles = 5, numExchange = 5
Output: 6
```

**Example 4:**

```
Input: numBottles = 2, numExchange = 3
Output: 2
```

**Constraints:**

*   `1 <= numBottles <= 100`
*   `2 <= numExchange <= 100`


#### Solution

Language: **C++**

```c++
class Solution {
public:
    int numWaterBottles(int numBottles, int numExchange) {
        
        int ans=numBottles;
        while(1)
        {
            ans += (numBottles/numExchange);
            
                if(!(numBottles/numExchange))
                 break;
                   
            numBottles = (numBottles/numExchange) + (numBottles%numExchange);
        }
                   
         return ans;
    }
};


Solution 2 =>  :)
class Solution {
public:
    int numWaterBottles(int numBottles, int numExchange) {
        return numBottles + (numBottles - 1) / (numExchange - 1);
    }
}; 
```
